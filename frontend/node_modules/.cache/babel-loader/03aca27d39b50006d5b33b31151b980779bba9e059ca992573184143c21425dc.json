{"ast":null,"code":"// Generate mock data based on query content\nexport const generateMockData = query => {\n  const lowercaseQuery = query.toLowerCase();\n\n  // Default data structure\n  const months = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\n\n  // Generate random values\n  const generateValues = (count, min = 10, max = 100) => {\n    return Array.from({\n      length: count\n    }, () => Math.floor(Math.random() * (max - min + 1)) + min);\n  };\n\n  // Sales data\n  if (lowercaseQuery.includes(\"sales\")) {\n    const values = generateValues(12, 50, 200);\n    const chartData = {\n      labels: months,\n      datasets: [{\n        label: \"Sales\",\n        data: values,\n        backgroundColor: \"rgba(54, 162, 235, 0.5)\",\n        borderColor: \"rgb(54, 162, 235)\",\n        borderWidth: 1\n      }]\n    };\n    const rawData = months.map((month, index) => ({\n      month,\n      sales: values[index]\n    }));\n    return {\n      chartData,\n      rawData,\n      chartType: lowercaseQuery.includes(\"trend\") ? \"line\" : lowercaseQuery.includes(\"compare\") ? \"bar\" : \"pie\"\n    };\n  }\n\n  // Revenue data\n  else if (lowercaseQuery.includes(\"revenue\")) {\n    const values = generateValues(12, 100, 500);\n    const chartData = {\n      labels: months,\n      datasets: [{\n        label: \"Revenue\",\n        data: values,\n        backgroundColor: \"rgba(75, 192, 192, 0.5)\",\n        borderColor: \"rgb(75, 192, 192)\",\n        borderWidth: 1\n      }]\n    };\n    const rawData = months.map((month, index) => ({\n      month,\n      revenue: values[index]\n    }));\n    return {\n      chartData,\n      rawData,\n      chartType: lowercaseQuery.includes(\"trend\") ? \"line\" : \"bar\"\n    };\n  }\n\n  // User data\n  else if (lowercaseQuery.includes(\"user\")) {\n    const values = generateValues(12, 20, 150);\n    const chartData = {\n      labels: months,\n      datasets: [{\n        label: \"Active Users\",\n        data: values,\n        backgroundColor: \"rgba(153, 102, 255, 0.5)\",\n        borderColor: \"rgb(153, 102, 255)\",\n        borderWidth: 1\n      }]\n    };\n    const rawData = months.map((month, index) => ({\n      month,\n      users: values[index]\n    }));\n    return {\n      chartData,\n      rawData,\n      chartType: lowercaseQuery.includes(\"distribution\") ? \"pie\" : \"line\"\n    };\n  }\n\n  // Default data\n  else {\n    const values = generateValues(12, 30, 120);\n    const chartData = {\n      labels: months,\n      datasets: [{\n        label: \"Metrics\",\n        data: values,\n        backgroundColor: \"rgba(255, 159, 64, 0.5)\",\n        borderColor: \"rgb(255, 159, 64)\",\n        borderWidth: 1\n      }]\n    };\n    const rawData = months.map((month, index) => ({\n      month,\n      value: values[index]\n    }));\n    return {\n      chartData,\n      rawData,\n      chartType: \"bar\"\n    };\n  }\n};","map":{"version":3,"names":["generateMockData","query","lowercaseQuery","toLowerCase","months","generateValues","count","min","max","Array","from","length","Math","floor","random","includes","values","chartData","labels","datasets","label","data","backgroundColor","borderColor","borderWidth","rawData","map","month","index","sales","chartType","revenue","users","value"],"sources":["C:/Users/ayusi/Desktop/pro1/frontend/src/utils/mockDataGenerator.js"],"sourcesContent":["// Generate mock data based on query content\r\nexport const generateMockData = (query) => {\r\n  const lowercaseQuery = query.toLowerCase();\r\n\r\n  // Default data structure\r\n  const months = [\r\n    \"Jan\",\r\n    \"Feb\",\r\n    \"Mar\",\r\n    \"Apr\",\r\n    \"May\",\r\n    \"Jun\",\r\n    \"Jul\",\r\n    \"Aug\",\r\n    \"Sep\",\r\n    \"Oct\",\r\n    \"Nov\",\r\n    \"Dec\",\r\n  ];\r\n\r\n  // Generate random values\r\n  const generateValues = (count, min = 10, max = 100) => {\r\n    return Array.from(\r\n      { length: count },\r\n      () => Math.floor(Math.random() * (max - min + 1)) + min\r\n    );\r\n  };\r\n\r\n  // Sales data\r\n  if (lowercaseQuery.includes(\"sales\")) {\r\n    const values = generateValues(12, 50, 200);\r\n\r\n    const chartData = {\r\n      labels: months,\r\n      datasets: [\r\n        {\r\n          label: \"Sales\",\r\n          data: values,\r\n          backgroundColor: \"rgba(54, 162, 235, 0.5)\",\r\n          borderColor: \"rgb(54, 162, 235)\",\r\n          borderWidth: 1,\r\n        },\r\n      ],\r\n    };\r\n\r\n    const rawData = months.map((month, index) => ({\r\n      month,\r\n      sales: values[index],\r\n    }));\r\n\r\n    return {\r\n      chartData,\r\n      rawData,\r\n      chartType: lowercaseQuery.includes(\"trend\")\r\n        ? \"line\"\r\n        : lowercaseQuery.includes(\"compare\")\r\n        ? \"bar\"\r\n        : \"pie\",\r\n    };\r\n  }\r\n\r\n  // Revenue data\r\n  else if (lowercaseQuery.includes(\"revenue\")) {\r\n    const values = generateValues(12, 100, 500);\r\n\r\n    const chartData = {\r\n      labels: months,\r\n      datasets: [\r\n        {\r\n          label: \"Revenue\",\r\n          data: values,\r\n          backgroundColor: \"rgba(75, 192, 192, 0.5)\",\r\n          borderColor: \"rgb(75, 192, 192)\",\r\n          borderWidth: 1,\r\n        },\r\n      ],\r\n    };\r\n\r\n    const rawData = months.map((month, index) => ({\r\n      month,\r\n      revenue: values[index],\r\n    }));\r\n\r\n    return {\r\n      chartData,\r\n      rawData,\r\n      chartType: lowercaseQuery.includes(\"trend\") ? \"line\" : \"bar\",\r\n    };\r\n  }\r\n\r\n  // User data\r\n  else if (lowercaseQuery.includes(\"user\")) {\r\n    const values = generateValues(12, 20, 150);\r\n\r\n    const chartData = {\r\n      labels: months,\r\n      datasets: [\r\n        {\r\n          label: \"Active Users\",\r\n          data: values,\r\n          backgroundColor: \"rgba(153, 102, 255, 0.5)\",\r\n          borderColor: \"rgb(153, 102, 255)\",\r\n          borderWidth: 1,\r\n        },\r\n      ],\r\n    };\r\n\r\n    const rawData = months.map((month, index) => ({\r\n      month,\r\n      users: values[index],\r\n    }));\r\n\r\n    return {\r\n      chartData,\r\n      rawData,\r\n      chartType: lowercaseQuery.includes(\"distribution\") ? \"pie\" : \"line\",\r\n    };\r\n  }\r\n\r\n  // Default data\r\n  else {\r\n    const values = generateValues(12, 30, 120);\r\n\r\n    const chartData = {\r\n      labels: months,\r\n      datasets: [\r\n        {\r\n          label: \"Metrics\",\r\n          data: values,\r\n          backgroundColor: \"rgba(255, 159, 64, 0.5)\",\r\n          borderColor: \"rgb(255, 159, 64)\",\r\n          borderWidth: 1,\r\n        },\r\n      ],\r\n    };\r\n\r\n    const rawData = months.map((month, index) => ({\r\n      month,\r\n      value: values[index],\r\n    }));\r\n\r\n    return {\r\n      chartData,\r\n      rawData,\r\n      chartType: \"bar\",\r\n    };\r\n  }\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}